{"ast":null,"code":"var _jsxFileName = \"/Users/natashawong/Desktop/124-lab-1/lab2/src/List.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction List(props) {\n  _s();\n\n  const searchInput = useRef(null); // useEffect(()=>{\n  //     searchInput.current.focus();\n  //  },[])\n\n  const filteredData = props.filterType === 'showCompleted' ? props.data : props.data.filter(item => !item.completed);\n\n  function handleChange(e, index) {\n    let isChecked = e.target.checked;\n    console.log(isChecked);\n    props.setData(isChecked, index);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: filteredData.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      id: i,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: (e, index) => handleChange(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), item.focus ? /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: searchInput,\n        value: item.todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        value: item.todo,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n\n_s(List, \"hUnOGmO9nTrp1SCQcsb1SJKhTbM=\");\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/Users/natashawong/Desktop/124-lab-1/lab2/src/List.js"],"names":["React","useEffect","useRef","List","props","searchInput","filteredData","filterType","data","filter","item","completed","handleChange","e","index","isChecked","target","checked","console","log","setData","map","i","focus","todo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB,QAAMC,WAAW,GAAGH,MAAM,CAAC,IAAD,CAA1B,CADiB,CAGjB;AACA;AACA;;AAEA,QAAMI,YAAY,GAAGF,KAAK,CAACG,UAAN,KAAqB,eAArB,GAAuCH,KAAK,CAACI,IAA7C,GAAoDJ,KAAK,CAACI,IAAN,CAAWC,MAAX,CAAkBC,IAAI,IAAI,CAACA,IAAI,CAACC,SAAhC,CAAzE;;AAEA,WAASC,YAAT,CAAsBC,CAAtB,EAAyBC,KAAzB,EAAgC;AAC5B,QAAIC,SAAS,GAAGF,CAAC,CAACG,MAAF,CAASC,OAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACAX,IAAAA,KAAK,CAACgB,OAAN,CAAcL,SAAd,EAAyBD,KAAzB;AACH;;AAED,sBACI;AAAA,cACKR,YAAY,CAACe,GAAb,CAAiB,CAACX,IAAD,EAAOY,CAAP,kBACd;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAyB,MAAA,EAAE,EAAEA,CAA7B;AAAA,8BACA;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,QAAQ,EAAE,CAACT,CAAD,EAAIC,KAAJ,KAAcF,YAAY,CAACE,KAAD;AAA3D;AAAA;AAAA;AAAA;AAAA,cADA,EAEKJ,IAAI,CAACa,KAAL,gBACG;AAAO,QAAA,GAAG,EAAElB,WAAZ;AAAyB,QAAA,KAAK,EAAEK,IAAI,CAACc;AAArC;AAAA;AAAA;AAAA;AAAA,cADH,gBAEG;AAAO,QAAA,KAAK,EAAEd,IAAI,CAACc,IAAnB;AAAyB,QAAA,QAAQ,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,cAJR;AAAA;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GA5BQrB,I;;KAAAA,I;AA8BT,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nfunction List(props) {\n    const searchInput = useRef(null);\n\n    // useEffect(()=>{\n    //     searchInput.current.focus();\n    //  },[])\n\n    const filteredData = props.filterType === 'showCompleted' ? props.data : props.data.filter(item => !item.completed)\n\n    function handleChange(e, index) {\n        let isChecked = e.target.checked;\n        console.log(isChecked);\n        props.setData(isChecked, index);\n    }\n\n    return(\n        <div>\n            {filteredData.map((item, i) => (\n                <div className = \"input\" id={i}>\n                <input type=\"checkbox\" onChange={(e, index) => handleChange(index)}/>\n                    {item.focus ?\n                        <input ref={searchInput} value={item.todo}/> :\n                        <input value={item.todo} readOnly={true}/>\n                    }\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default List;"]},"metadata":{},"sourceType":"module"}