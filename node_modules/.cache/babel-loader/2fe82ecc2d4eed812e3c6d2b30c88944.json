{"ast":null,"code":"var _jsxFileName = \"/Users/natashawong/Desktop/124-lab-1/lab2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport List from './List';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialData = [{\n    id: 1,\n    todo: \"Call mom\",\n    completed: true,\n    focus: false\n  }, {\n    id: 2,\n    todo: \"Eat lunch\",\n    completed: false,\n    focus: false\n  }];\n  const filterType = {\n    showAll: \"SHOW_ALL\",\n    showCompleted: \"SHOW_COMPLETED\"\n  };\n  const modeType = {\n    add: \"ADD\",\n    edit: \"EDIT\",\n    base: \"BASE\"\n  };\n  const [data, setData] = useState(initialData);\n  const [filter, setFilterType] = useState(filterType.showAll);\n  const [mode, setMode] = useState(modeType.base);\n\n  function plusClicked() {\n    let newId = data.length;\n    let newData = data;\n    newData.push({\n      id: newId,\n      todo: \"\",\n      completed: false,\n      focus: true\n    });\n    setData(newData);\n    setMode(modeType.add);\n  }\n\n  function doneClicked() {\n    let newData = data;\n    data[data.length - 1].todo === \"\" && newData.pop();\n    setData(newData);\n    setMode(modeType.base);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: mode === modeType.add || mode === modeType.edit ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button doneButton\",\n        onClick: doneClicked,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button editButton\",\n          onClick: () => setMode(modeType.edit),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button plusButton\",\n          onClick: plusClicked,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"underline\",\n          children: \"To-do list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      data: data,\n      filterType: filter,\n      setData: (isComplete, index) => {\n        let newData = data;\n        newData[index].completed = isComplete;\n        setData(newData);\n        console.log('new data change complete' + JSON.stringify(newData[index]));\n      },\n      editData: (newTodo, index) => {\n        let newData = data;\n        newData[index].todo = newTodo;\n        setData(newData);\n      },\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: mode === modeType.edit && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button showCompleted\",\n          onClick: () => setFilterType(filterType.showCompleted),\n          children: \"Show Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button deleteCompleted\",\n          children: \"Delete Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"nfr+iG8UjYsDFwYA06x4z/yB1o0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/natashawong/Desktop/124-lab-1/lab2/src/App.js"],"names":["React","useEffect","useRef","useState","List","App","initialData","id","todo","completed","focus","filterType","showAll","showCompleted","modeType","add","edit","base","data","setData","filter","setFilterType","mode","setMode","plusClicked","newId","length","newData","push","doneClicked","pop","isComplete","index","console","log","JSON","stringify","newTodo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport List from './List';\nimport './styles.css';\n\nfunction App() {\n  const initialData = [\n    {\n      id: 1,\n      todo: \"Call mom\",\n      completed: true,\n      focus: false,\n    },\n    {\n      id: 2,\n      todo: \"Eat lunch\",\n      completed: false,\n      focus: false,\n    }\n  ]\n\n  const filterType = {\n    showAll: \"SHOW_ALL\",\n    showCompleted: \"SHOW_COMPLETED\",\n  }\n\n  const modeType = {\n    add: \"ADD\",\n    edit: \"EDIT\",\n    base: \"BASE\",\n  }\n\n  const [data, setData] = useState(initialData);\n  const [filter, setFilterType] = useState(filterType.showAll);\n  const [mode, setMode] = useState(modeType.base);\n\n  function plusClicked() {\n      let newId = data.length;\n      let newData = data;\n\n      newData.push({\n          id: newId,\n          todo: \"\",\n          completed: false,\n          focus: true,\n      })\n\n      setData(newData);\n      setMode(modeType.add);\n  }\n\n  function doneClicked() {\n    let newData = data;\n    data[data.length-1].todo === \"\" && newData.pop()\n\n    setData(newData);\n    setMode(modeType.base);\n  }\n\n  return (\n    <>\n      <div className=\"buttons\">\n          {(mode === modeType.add || mode === modeType.edit) ? \n                (<button className=\"button doneButton\" onClick={doneClicked}>Done</button>)\n              :\n              (\n                <>\n                <button className=\"button editButton\" onClick={() => setMode(modeType.edit)}>Edit</button>\n                <button className=\"button plusButton\" onClick={plusClicked}>+</button> \n                </>\n              )\n          }\n      </div>\n      <div className=\"body-container\">\n          <div className=\"title\">\n              <h1 className=\"underline\">To-do list</h1>\n          </div>\n      </div>\n\n      <List\n        data={data} \n        filterType={filter}\n        setData={(isComplete, index) => {\n          let newData = data;\n          newData[index].completed = isComplete;\n          setData(newData);\n          console.log('new data change complete' + JSON.stringify(newData[index]))\n        }}\n        editData={(newTodo, index) => {\n          let newData = data;\n          newData[index].todo = newTodo;\n          setData(newData);\n        }}\n        mode={mode}\n      />\n\n      <div className=\"footer\">\n              {mode === modeType.edit && \n                <> \n                  <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.showCompleted)}>Show Completed</button>\n                  <button className=\"button deleteCompleted\">Delete Completed</button> \n                </>}\n            </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}