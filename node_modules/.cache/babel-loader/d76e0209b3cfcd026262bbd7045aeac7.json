{"ast":null,"code":"var _jsxFileName = \"/Users/natashawong/Desktop/124-lab-1/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport List from './List';\nimport firebase from \"firebase/compat\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport { generateUniqueID } from \"react-firebase-hooks/firestore\";\nimport { map } from '@firebase/util';\nimport './styles.css';\nimport { filterType, modeType } from './Constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n  authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n  projectId: \"hmc-cs124-fa21-labs\",\n  storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n  messagingSenderId: \"949410042946\",\n  appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nfunction App() {\n  _s();\n\n  const collection = db.collection('natasha-bettina-124');\n  const [value, loading, error] = useCollection(collection);\n  const initialData = value ? value : [{}];\n  const [data, setData] = useState(initialData);\n  const [filter, setFilterType] = useState(filterType.showAll);\n  const [mode, setMode] = useState(modeType.base);\n  const [atLeastOneSelected, setAtLeastOneSelected] = useState(false);\n  const [latestId, setLatestId] = useState(3); //   function handleDeletePerson(personId) {\n  //     collection.doc(personId).delete();\n  // }\n  // function handleAddPerson() {\n  //     const newId = generateUniqueID();\n  //     collection.doc(newId).set({ id: newId, name: \"\", email: \"\", phone: \"\" });\n  // }\n  // function handlePersonFieldChanged(personId, field, value) {\n  //     console.log(personId, field, value);\n  //     collection.doc(personId).update({[field]: value});\n  // }\n  // function handleSortCheckChange() {}\n  // function generatePeopleData() {\n  //     if (value) {\n  //         return value.docs.map(e => {return { ...e.data(), id: e.id }});\n  //     }\n  // }\n\n  function getTodos() {\n    if (value) {\n      return value;\n    }\n  }\n\n  function addTodo() {\n    const newId = generateUniqueID;\n    collection.doc(newId).set({\n      id: newId,\n      todo: \"\",\n      completed: false\n    });\n  }\n\n  function removeTodo(id) {\n    collection.doc(id).delete();\n  }\n\n  function editTodo() {}\n\n  function plusClicked() {\n    let newData = data;\n    newData.push({\n      id: latestId,\n      todo: \"\",\n      completed: false\n    });\n    let newId = latestId + 1;\n    setLatestId(newId);\n    setData(newData);\n    setMode(modeType.add);\n  }\n\n  function doneClicked() {\n    let newData = data;\n\n    if (data.length > 1) {\n      data[data.length - 1].todo === \"\" && newData.pop();\n    }\n\n    setData(newData);\n    setMode(modeType.base);\n  }\n\n  function editClicked() {\n    data.map((item, i) => {\n      if (item.completed) {\n        setAtLeastOneSelected(true);\n      }\n    });\n    setMode(modeType.edit);\n  }\n\n  function deleteSelected() {\n    let newData = data.filter(item => !item.completed);\n    newData.map((item, i) => {\n      item.completed = false;\n    });\n    setData(newData);\n    console.log(newData);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: mode === modeType.add || mode === modeType.edit ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button doneButton\",\n        onClick: doneClicked,\n        children: \"Done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button editButton\",\n          onClick: editClicked,\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button plusButton\",\n          onClick: plusClicked,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"underline\",\n          children: \"To-do list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      data: data,\n      filterType: filter,\n      setData: (isComplete, index) => {\n        let newData = data;\n        newData[index].completed = isComplete;\n        setData(newData);\n      },\n      editData: (newTodo, index) => {\n        let newData = data;\n        newData[index].todo = newTodo;\n        setData(newData);\n      },\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: mode === modeType.edit && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [filter === filterType.hideCompleted && atLeastOneSelected ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button showCompleted\",\n          onClick: () => setFilterType(filterType.showAll),\n          children: \"Show All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button showCompleted\",\n          onClick: () => setFilterType(filterType.hideCompleted),\n          children: \"Hide Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button deleteCompleted\",\n          onClick: deleteSelected,\n          children: \"Delete Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"1sYyPseya3TFHe4h765PzrKruZY=\", false, function () {\n  return [useCollection];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/natashawong/Desktop/124-lab-1/src/App.js"],"names":["React","useState","List","firebase","useCollection","generateUniqueID","map","filterType","modeType","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","db","firestore","App","collection","value","loading","error","initialData","data","setData","filter","setFilterType","showAll","mode","setMode","base","atLeastOneSelected","setAtLeastOneSelected","latestId","setLatestId","getTodos","addTodo","newId","doc","set","id","todo","completed","removeTodo","delete","editTodo","plusClicked","newData","push","add","doneClicked","length","pop","editClicked","item","i","edit","deleteSelected","console","log","isComplete","index","newTodo","hideCompleted"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport List from './List';\nimport firebase from \"firebase/compat\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport { generateUniqueID } from \"react-firebase-hooks/firestore\";\nimport { map } from '@firebase/util';\n\nimport './styles.css';\nimport {filterType, modeType} from './Constants';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCd9qqxvMpEKpBzwfWcc2tlRFa6ICaLH_s\",\n  authDomain: \"hmc-cs124-fa21-labs.firebaseapp.com\",\n  projectId: \"hmc-cs124-fa21-labs\",\n  storageBucket: \"hmc-cs124-fa21-labs.appspot.com\",\n  messagingSenderId: \"949410042946\",\n  appId: \"1:949410042946:web:0113b139a7e3cd1cc709db\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nfunction App() {\n  const collection = db.collection('natasha-bettina-124');\n  const [value, loading, error] = useCollection(collection);\n  const initialData = value ? value : [{}];\n\n  const [data, setData] = useState(initialData);\n  const [filter, setFilterType] = useState(filterType.showAll);\n  const [mode, setMode] = useState(modeType.base);\n  const [atLeastOneSelected, setAtLeastOneSelected ] = useState(false);\n  const [latestId, setLatestId] = useState(3);\n\n//   function handleDeletePerson(personId) {\n//     collection.doc(personId).delete();\n// }\n\n// function handleAddPerson() {\n  //     const newId = generateUniqueID();\n  //     collection.doc(newId).set({ id: newId, name: \"\", email: \"\", phone: \"\" });\n// }\n\n// function handlePersonFieldChanged(personId, field, value) {\n//     console.log(personId, field, value);\n//     collection.doc(personId).update({[field]: value});\n// }\n\n// function handleSortCheckChange() {}\n\n// function generatePeopleData() {\n//     if (value) {\n//         return value.docs.map(e => {return { ...e.data(), id: e.id }});\n//     }\n// }\n  function getTodos() {\n    if (value) { return value; }\n  }\n\n  function addTodo() {\n    const newId = generateUniqueID;\n    collection.doc(newId).set({ id: newId, todo: \"\", completed: false});\n  }\n\n  function removeTodo(id) {\n    collection.doc(id).delete();\n  }\n\n  function editTodo() {\n    \n  }\n\n  function plusClicked() {\n      let newData = data;\n\n      newData.push({\n          id: latestId,\n          todo: \"\",\n          completed: false,\n      })\n      let newId = latestId + 1;\n      setLatestId(newId);\n\n      setData(newData);\n      setMode(modeType.add);\n  }\n\n  function doneClicked() {\n    let newData = data;\n    if (data.length > 1) {data[data.length-1].todo === \"\" && newData.pop()}\n\n    setData(newData);\n    setMode(modeType.base);\n  }\n\n  function editClicked() {\n    data.map((item, i) => {\n      if (item.completed) {setAtLeastOneSelected(true)}\n    })\n    setMode(modeType.edit);\n  }\n\n  function deleteSelected() {\n    let newData = data.filter((item) => !item.completed)\n    newData.map((item, i) => {\n      item.completed = false;\n    })\n    setData(newData);\n    console.log(newData);\n  }\n\n  return (\n    <>\n      <div className=\"buttons\">\n          {(mode === modeType.add || mode === modeType.edit) ? \n                (<button className=\"button doneButton\" onClick={doneClicked}>Done</button>)\n              :\n              (\n                <>\n                <button className=\"button editButton\" onClick={editClicked}>Edit</button>\n                <button className=\"button plusButton\" onClick={plusClicked}>+</button> \n                </>\n              )\n          }\n      </div>\n      <div className=\"body-container\">\n          <div className=\"title\">\n              <h1 className=\"underline\">To-do list</h1>\n          </div>\n      </div>\n\n      <List\n        data={data} \n        filterType={filter}\n        setData={(isComplete, index) => {\n          let newData = data;\n          newData[index].completed = isComplete;\n          setData(newData);\n        }}\n        editData={(newTodo, index) => {\n          let newData = data;\n          newData[index].todo = newTodo;\n          setData(newData);\n        }}\n        mode={mode}\n      />\n\n      <div className=\"footer\">\n        {mode === modeType.edit && \n          <>\n            {filter === filterType.hideCompleted && atLeastOneSelected ? \n              <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.showAll)}>Show All</button> :\n              <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.hideCompleted)}>Hide Completed</button>\n            }\n            <button className=\"button deleteCompleted\" onClick={deleteSelected}>Delete Completed</button> \n          </>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}