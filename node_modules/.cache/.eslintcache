[{"/Users/natashawong/Desktop/124-lab-1/src/index.js":"1","/Users/natashawong/Desktop/124-lab-1/src/App.js":"2","/Users/natashawong/Desktop/124-lab-1/src/reportWebVitals.js":"3","/Users/natashawong/Desktop/124-lab-1/src/List.js":"4","/Users/natashawong/Desktop/124-lab-1/src/Constants.js":"5"},{"size":500,"mtime":1633103572299,"results":"6","hashOfConfig":"7"},{"size":3220,"mtime":1634247608797,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1633103572300,"results":"9","hashOfConfig":"7"},{"size":1540,"mtime":1634247637149,"results":"10","hashOfConfig":"7"},{"size":172,"mtime":1634240110437,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zhpg35",{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/natashawong/Desktop/124-lab-1/src/index.js",[],"/Users/natashawong/Desktop/124-lab-1/src/App.js",["24","25"],"import React, { useState } from 'react';\nimport List from './List';\n\nimport './styles.css';\nimport {filterType, modeType} from './Constants';\n\nfunction App() {\n  const initialData = [\n    {\n      id: 1,\n      todo: \"Call mom\",\n      completed: false,\n    },\n    {\n      id: 2,\n      todo: \"Eat lunch\",\n      completed: false,\n    }\n  ]\n\n  const [data, setData] = useState(initialData);\n  const [filter, setFilterType] = useState(filterType.showAll);\n  const [mode, setMode] = useState(modeType.base);\n  const [atLeastOneSelected, setAtLeastOneSelected ] = useState(false);\n  const [latestId, setLatestId] = useState(3);\n\n  function plusClicked() {\n      let newData = data;\n\n      newData.push({\n          id: latestId,\n          todo: \"\",\n          completed: false,\n      })\n      let newId = latestId + 1;\n      setLatestId(newId);\n\n      setData(newData);\n      setMode(modeType.add);\n  }\n\n  function doneClicked() {\n    let newData = data;\n    if (data.length > 1) {data[data.length-1].todo === \"\" && newData.pop()}\n\n    setData(newData);\n    setMode(modeType.base);\n  }\n\n  function editClicked() {\n    data.map((item, i) => {\n      if (item.completed) {setAtLeastOneSelected(true)}\n    })\n    setMode(modeType.edit);\n  }\n\n  function deleteSelected() {\n    let newData = data.filter((item) => !item.completed)\n    newData.map((item, i) => {\n      item.completed = false;\n    })\n    setData(newData);\n    console.log(newData);\n  }\n\n  return (\n    <>\n      <div className=\"buttons\">\n          {(mode === modeType.add || mode === modeType.edit) ? \n                (<button className=\"button doneButton\" onClick={doneClicked}>Done</button>)\n              :\n              (\n                <>\n                <button className=\"button editButton\" onClick={editClicked}>Edit</button>\n                <button className=\"button plusButton\" onClick={plusClicked}>+</button> \n                </>\n              )\n          }\n      </div>\n      <div className=\"body-container\">\n          <div className=\"title\">\n              <h1 className=\"underline\">To-do list</h1>\n          </div>\n      </div>\n\n      <List\n        data={data} \n        filterType={filter}\n        setData={(isComplete, index) => {\n          let newData = data;\n          newData[index].completed = isComplete;\n          setData(newData);\n        }}\n        editData={(newTodo, index) => {\n          let newData = data;\n          newData[index].todo = newTodo;\n          setData(newData);\n        }}\n        mode={mode}\n      />\n\n      <div className=\"footer\">\n        {mode === modeType.edit && \n          <>\n            {atLeastOneSelected && <button className=\"button deleteSelected\" onClick={deleteSelected}>Delete Selected</button>}\n            {filter === filterType.hideCompleted && atLeastOneSelected ? \n              <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.showAll)}>Show All</button> :\n              <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.hideCompleted)}>Hide Completed</button>\n            }\n            <button className=\"button deleteCompleted\" onClick={deleteSelected}>Delete Completed</button> \n          </>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/Users/natashawong/Desktop/124-lab-1/src/reportWebVitals.js",[],"/Users/natashawong/Desktop/124-lab-1/src/List.js",["26","27"],"import React, { useState } from 'react';\nimport {filterType} from './Constants';\n\nfunction List(props) {\n    const filteredData = props.filterType === filterType.hideCompleted ? props.data.filter(item => !item.completed) : props.data\n    const [todo, setTodo] = useState({});\n    const [checked, setChecked] = useState({});\n    \n    function handleChange(index) {\n        return (e) => {\n            let isChecked = e.target.checked;\n            setChecked( prevState => ({...prevState, [e.target.name] : e.target.checked}))\n            props.setData(isChecked, index);\n        }\n    }\n\n    function onEdit(index) {\n        return (e) => {\n            setTodo( prevState => ({...prevState, [e.target.name] : e.target.value}))\n            props.editData(e.target.value, index);\n        }\n    }\n\n    return(\n        <div>\n            {filteredData.map((item, i) => (\n                <div className = \"input\" key={i}>\n                <input type=\"checkbox\" id={i} name={i} disabled={props.mode === \"EDIT\"} checked={item.completed} onChange={handleChange(i)}/>\n                    {props.mode === \"EDIT\" ? \n                        <input id={i} name={i} value={item.todo} onChange={onEdit(i)}/> :\n                    (props.mode === \"ADD\" && i === filteredData.length-1) ?\n                        <input id={i} name={i} value={item.todo} onChange={onEdit(i)}/> :\n                        <input id={i} name={i} value={item.todo} readOnly/>\n                    }\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default List;","/Users/natashawong/Desktop/124-lab-1/src/Constants.js",[],{"ruleId":"28","severity":1,"message":"29","line":51,"column":24,"nodeType":"30","messageId":"31","endLine":51,"endColumn":26},{"ruleId":"28","severity":1,"message":"29","line":59,"column":27,"nodeType":"30","messageId":"31","endLine":59,"endColumn":29},{"ruleId":"32","severity":1,"message":"33","line":6,"column":12,"nodeType":"34","messageId":"35","endLine":6,"endColumn":16},{"ruleId":"32","severity":1,"message":"36","line":7,"column":12,"nodeType":"34","messageId":"35","endLine":7,"endColumn":19},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'todo' is assigned a value but never used.","Identifier","unusedVar","'checked' is assigned a value but never used."]