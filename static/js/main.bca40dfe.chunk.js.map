{"version":3,"sources":["Constants.js","List.js","App.js","reportWebVitals.js","index.js"],"names":["filterType","modeType","List","props","filteredData","data","filter","item","completed","useState","setTodo","setChecked","onEdit","index","e","prevState","target","name","value","editData","map","i","className","type","id","disabled","mode","checked","onChange","isChecked","setData","length","todo","readOnly","App","setFilterType","setMode","atLeastOneSelected","setAtLeastOneSelected","latestId","setLatestId","deleteSelected","newData","console","log","onClick","pop","push","isComplete","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bca40dfe.chunk.js","sourcesContent":["export const filterType = {\n    showAll: \"SHOW_ALL\",\n    hideCompleted: \"HIDE_COMPLETED\",\n}\n\nexport const modeType = {\n    add: \"ADD\",\n    edit: \"EDIT\",\n    base: \"BASE\",\n}","import React, { useState } from 'react';\nimport {filterType} from './Constants';\n\nfunction List(props) {\n    const filteredData = props.filterType === filterType.hideCompleted ? props.data.filter(item => !item.completed) : props.data\n    const [todo, setTodo] = useState({});\n    const [checked, setChecked] = useState({});\n    \n    function handleChange(index) {\n        return (e) => {\n            let isChecked = e.target.checked;\n            setChecked( prevState => ({...prevState, [e.target.name] : e.target.checked}))\n            props.setData(isChecked, index);\n        }\n    }\n\n    function onEdit(index) {\n        return (e) => {\n            setTodo( prevState => ({...prevState, [e.target.name] : e.target.value}))\n            props.editData(e.target.value, index);\n        }\n    }\n\n    return(\n        <div>\n            {filteredData.map((item, i) => (\n                <div className = \"input\" key={i}>\n                <input type=\"checkbox\" id={i} name={i} disabled={props.mode === \"EDIT\"} checked={item.completed} onChange={handleChange(i)}/>\n                    {props.mode === \"EDIT\" ? \n                        <input id={i} name={i} value={item.todo} onChange={onEdit(i)}/> :\n                    (props.mode === \"ADD\" && i === filteredData.length-1) ?\n                        <input id={i} name={i} value={item.todo} onChange={onEdit(i)}/> :\n                        <input id={i} name={i} value={item.todo} readOnly/>\n                    }\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default List;","import React, { useState } from 'react';\nimport List from './List';\n\nimport './styles.css';\nimport {filterType, modeType} from './Constants';\n\nfunction App() {\n  const initialData = [\n    {\n      id: 1,\n      todo: \"Call mom\",\n      completed: false,\n    },\n    {\n      id: 2,\n      todo: \"Eat lunch\",\n      completed: false,\n    }\n  ]\n\n  const [data, setData] = useState(initialData);\n  const [filter, setFilterType] = useState(filterType.showAll);\n  const [mode, setMode] = useState(modeType.base);\n  const [atLeastOneSelected, setAtLeastOneSelected ] = useState(false);\n  const [latestId, setLatestId] = useState(3);\n\n  function plusClicked() {\n      let newData = data;\n\n      newData.push({\n          id: latestId,\n          todo: \"\",\n          completed: false,\n      })\n      let newId = latestId + 1;\n      setLatestId(newId);\n\n      setData(newData);\n      setMode(modeType.add);\n  }\n\n  function doneClicked() {\n    let newData = data;\n    if (data.length > 1) {data[data.length-1].todo === \"\" && newData.pop()}\n\n    setData(newData);\n    setMode(modeType.base);\n  }\n\n  function editClicked() {\n    data.map((item, i) => {\n      if (item.completed) {setAtLeastOneSelected(true)}\n    })\n    setMode(modeType.edit);\n  }\n\n  function deleteSelected() {\n    let newData = data.filter((item) => !item.completed)\n    newData.map((item, i) => {\n      item.completed = false;\n    })\n    setData(newData);\n    console.log(newData);\n  }\n\n  return (\n    <>\n      <div className=\"buttons\">\n          {(mode === modeType.add || mode === modeType.edit) ? \n                (<button className=\"button doneButton\" onClick={doneClicked}>Done</button>)\n              :\n              (\n                <>\n                <button className=\"button editButton\" onClick={editClicked}>Edit</button>\n                <button className=\"button plusButton\" onClick={plusClicked}>+</button> \n                </>\n              )\n          }\n      </div>\n      <div className=\"body-container\">\n          <div className=\"title\">\n              <h1 className=\"underline\">To-do list</h1>\n          </div>\n      </div>\n\n      <List\n        data={data} \n        filterType={filter}\n        setData={(isComplete, index) => {\n          let newData = data;\n          newData[index].completed = isComplete;\n          setData(newData);\n        }}\n        editData={(newTodo, index) => {\n          let newData = data;\n          newData[index].todo = newTodo;\n          setData(newData);\n        }}\n        mode={mode}\n      />\n\n      <div className=\"footer\">\n        {mode === modeType.edit && \n          <>\n            {atLeastOneSelected && <button className=\"button deleteSelected\" onClick={deleteSelected}>Delete Selected</button>}\n            {filter === filterType.hideCompleted && atLeastOneSelected ? \n              <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.showAll)}>Show All</button> :\n              <button className=\"button showCompleted\" onClick={() => setFilterType(filterType.hideCompleted)}>Hide Completed</button>\n            }\n            <button className=\"button deleteCompleted\" onClick={deleteSelected}>Delete Completed</button> \n          </>}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}